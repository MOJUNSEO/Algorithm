/*
LIS : ���� ���� ����
� ������ ���ʿ��� ���������� ������ ������, 
�� �迭 ������ �����ϸ鼭 ũ�Ⱑ ���������� Ŀ���� ���� �� �κм����� �����ϴ� ����

/����
KOI ��������� N���� ���̵��� �ִ�. ������ ��ǳ�� ���� ���̴�. �������� 1������ N������ ��ȣ�� �����ִ� ��ȣǥ�� ���̵��� ������ �ٿ��־���. �������� ���̵��� ȿ�������� ��ȣ�ϱ� ���� ���������� ��ȣ������� �Ϸķ� ���� �ɾ���� �Ͽ���. �̵� ���߿� ���� ���̵��� ��ȣ������ �ٲ����. �׷��� �������� �ٽ� ��ȣ ������� ���� ����� ���ؼ� ���̵��� ��ġ�� �ű���� �Ѵ�. �׸��� ���̵��� ȥ������������ �ʵ��� �ϱ� ���� ��ġ�� �ű�� ���̵��� ���� �ּҷ� �Ϸ��� �Ѵ�.

���� ���, 7���� ���̵��� ������ ���� ������� ���� �� �ִٰ� ����.
3 7 5 2 6 1 4

���̵��� ������� ���� ����� ����, ���� 4�� ���̸� 7�� ������ �ڷ� �Űܺ���. �׷��� ������ ���� ������ �ȴ�.
3 7 4 5 2 6 1

����, 7�� ���̸� �� �ڷ� �ű��.
3 4 5 2 6 1 7

���� 1�� ���̸� �� ������ �ű��.
1 3 4 5 2 6 7

���������� 2�� ���̸� 1�� ������ �ڷ� �ű�� ��ȣ ������� ��ġ�ȴ�.
1 2 3 4 5 6 7

���� ������� ��� 4���� ���̸� �Ű� ��ȣ ������� ���� �����. 
���� ������ 3���� ���̸��� �Űܼ��� ������� ��ġ�� ���� ����. ����, 4���� �ű�� ���� ���� ���� ���� ���̸� �ű�� ���̴�.
N���� ���̵��� ������ ������ ���� �� ���� ��, ��ȣ ������� ��ġ�ϱ� ���� �Ű����� ������ �ּ� ���� ���ϴ� ���α׷��� �ۼ��Ͻÿ�.

/�Է�
ù° �ٿ��� ���̵��� �� N�� �־�����. ��° �ٺ��ʹ� 1���� N������ ���ڰ� �� �ٿ� �ϳ��� �־�����. N�� 2 �̻� 200 ������ �����̴�.

/���
ù° �ٿ��� ��ȣ ������� ���� ����µ� �Ű����� ���̵��� �ּ� ���� ����Ѵ�.

/���� �Է� 7 3 7 5 2 6 1 4
/���� ��� 4
 */
package Last_Algorithm;
import java.util.Scanner;


public class Linee {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int ChildNum = sc.nextInt();
		
		int Child[] = new int[ChildNum];
		int D[] = new int[ChildNum];
		int max = 0;
		
		for(int i=0;i<ChildNum;i++)
		{
			Child[i] = sc.nextInt();
		}
		
		for(int i=0;i<ChildNum;i++)
		{
			D[i] = 1;
			for(int j=0;j<i;j++)
			{
				if(Child[j] < Child[i] && D[i] < D[j] + 1)
				{
					D[i]++;
				}
			}
			if(max < D[i])
			{
				max = D[i];
			}
		}

		System.out.println((ChildNum-max));
		sc.close();
		
	}
}
